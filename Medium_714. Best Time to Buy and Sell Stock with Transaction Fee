//final state machine
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee)
    {
        int n=prices.size();
        int s0[n];
        int s1[n];
        
        s0[0]=0;
        s1[0]=-prices[0];        
        for(int i=1; i<n; ++i)
        {
            s0[i]=max(s0[i-1],s1[i-1]+prices[i]-fee);
            s1[i]=max(s1[i-1],s0[i-1]-prices[i]);
        }
        
        /*for(auto& i:s0) cout<<i<<"  ";
        cout<<endl;
        for(auto& i:s1) cout<<i<<" ";*/
        
        return max(s0[n-1],s1[n-1]);
    }
};

//2022-07-27
//state transition
//time  : O(n)
//space : O(1)
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee)
    {
        int n=prices.size();
        
        int hold[n];
        int not_hold[n];
        
        hold[0]=-prices[0];
        not_hold[0]=0;
        
        for(int i=1; i<n; ++i)
        {
            hold[i]=max(hold[i-1],not_hold[i-1]-prices[i]);
            not_hold[i]=max(not_hold[i-1],hold[i-1]+prices[i]-fee);
        }
        
        return not_hold[n-1];
    }
};
